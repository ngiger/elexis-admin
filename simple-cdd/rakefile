#!/bin/env ruby
# These values reflect my environment, please adapt it to suit your needs
APPROX_SERVER="http://fest:9999/debian/"
OptRoot='/opt'
ARCH="i386" # i386,amd64,ppc,ppc64 or whatever Debian supports
ENV['ARCH']=ARCH

# You will probably want to fetch the configuration from your server
# This one is in any case private and of no use for you!
COSRE = { :server   => 'cosre.dyndns.org',
          :username => 'niklaus',
	  :path     => '/home/niklaus/.bashrc',
}

# net/scp does not work
# throughs me a `could not settle on language_client algorithm' exception
# Also puppet had problems installing net-scp gem (I am running jruby)
require 'fileutils'
# need to expand search path for our directory to enable reading conf files

desc "Prepare simple_cdd environment in #{OptRoot}"
task "simple_cdd_env" do
  ENV['LANG']="C" # Symplifies debugging as all errors will be printed in english
  ['images'].each do
    |path|
      t = "#{OptRoot}/#{path}"
      FileUtils.makedirs(t)		    if !File.directory?(t)
      FileUtils.ln_s(t,".", :verbose=>true) if !File.exists?(File.basename(t))
  end
end

class SimpleCddConf
  @@allConfs = Hash.new
  attr_reader :name
  Fields = ['conf','description', 'locale','keyboard','release',
            'packages','preseed','postinst'].each { 
	      |x| eval "attr_accessor :#{x}" 
	    }
  def initialize(name)
    @name=name
    @@allConfs[name]= self
    return self
  end  

  def copyTo(newName)
    aCopy = SimpleCddConf.new(newName)
    Fields.each{|f| eval "aCopy.#{f} = self.#{f}"}
    @@allConfs[newName] = aCopy
    return aCopy
  end

  def SimpleCddConf::get(index)
    return @@allConfs[index]
  end
end


def runSimpleCdd(name)
  FileUtils.rm_rf('profiles')
  require "#{Dir.pwd}/#{name}" # reads in name.rb
  cnf = SimpleCddConf.get(name)
  FileUtils.makedirs('profiles')
  cnf.conf+="profiles=\"#{name}\"\n"
  cnf.conf+="debian_mirror=\"#{APPROX_SERVER}\"\n"
  cnf.conf+="wget_debian_mirror=\"#{APPROX_SERVER}\"\n"
  cnf.conf+="debian-mirror=\"#{APPROX_SERVER}\"\n"
  cnf.conf+="wget-debian-mirror=\"#{APPROX_SERVER}\"\n"
  ['conf','description','packages','preseed','postinst'].each { |x|
    d = "profiles/#{name}.#{x}"
    ausgabe=File.open(d, "w+")
    ausgabe.puts(eval("cnf.#{x}"))
    ausgabe.close
    FileUtils.chmod(0755, d) if x == 'postinst'
  }
  # ENV['cd_img']="myname-#{cnf.release}.iso"
  cmd = "wget_debian_mirror=#{APPROX_SERVER} time build-simple-cdd --dist #{cnf.release} \
--keyboard #{cnf.keyboard} --locale  #{cnf.locale} \
--conf profiles/#{name}.conf  \
--profiles #{name} \
--debian-mirror #{APPROX_SERVER} \
2>&1 | tee build_#{name}.log"
  sh cmd
  puts "Done creating ISO-image. Test it using the following cmds:"
  puts "qemu-img create  #{name}.qcow2 40GB"
  puts "kvm -hda #{name}.qcow2 -cdrom debian-testing-i386-CD-1.iso -boot d"
end

def add_iso_target(name, opts = {})
  desc "Produces ISO #{name}"
  task name => [ 'simple_cdd_env'] do
    datei = name+'.rb'
    if File.exists?(datei) then
      p "origin #{datei} exists locally"
    else
      p "download #{datei} #{opts.inspect}"
      # download a file from a remote server
      cmd =  "scp #{opts[:username]}@#{opts[:server]}:#{opts[:path]} #{datei}"
      sh cmd
    end
    runSimpleCdd(name)
  end
end

add_iso_target('demo_dhcp',   COSRE)
add_iso_target('demo_ip_fix', COSRE)



